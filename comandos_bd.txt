CREATE DATABASE ADHESIVOS_COLIMA;
USE ADHESIVOS_COLIMA;
Create table usuarios(id int auto_increment primary key, nombreUsuario varchar(50) not null, contrasena varchar(255) not null, tipo varchar(13) not null);
Create table productos(id int auto_increment primary key, nombre varchar(50), cantidad int not null, precio int not null);
Create table clientes(id int auto_increment primary key, rfc varchar(13) not null, celular long not null, calle VARCHAR(35) not null, numero int not null, codigopostal int not null, idUser int not null, FOREIGN KEY (idUser) REFERENCES usuarios(id));
Create table facturas(id int auto_increment primary key ,fecha date not null, total float not null, idcliente int not null, foreign key (idcliente) REFERENCES clientes(id));
Create table productos_factura(idproducto int, idfactura int,cantidad int not null, precioVenta float not null, FOREIGN KEY(idproducto) REFERENCES productos(id), foreign key (idfactura) REFERENCES facturas(id), primary key (idproducto, idfactura));

-- Trigger para restar al stock de un prouducto --
DELIMITER //

CREATE TRIGGER restarStock AFTER INSERT ON productos_factura
FOR EACH ROW
BEGIN
    -- Actualiza la cantidad en productos restando la cantidad insertada en productos_factura
    UPDATE productos 
    SET cantidad = cantidad - NEW.cantidad 
    WHERE id = NEW.idproducto;
END //

DELIMITER ;

-- Trigger para agregar el precio de venta al campo precioVenta --
DELIMITER //

CREATE TRIGGER agregarPrecio
BEFORE INSERT ON productos_factura
FOR EACH ROW
BEGIN
    DECLARE p_precio DECIMAL(10,2);

    -- Busca el precio del producto en la tabla productos
    SELECT precio INTO p_precio
    FROM productos
    WHERE id = NEW.idproducto;

    -- Verifica si el precio fue encontrado
    IF p_precio IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Precio del producto no encontrado en la tabla productos';
    ELSE
        -- Asigna el precio encontrado al nuevo registro
        SET NEW.precioVenta = p_precio;
    END IF;
END//

DELIMITER ;

-- Procedimiento almacenado para agregar clientes -- 
DELIMITER $$
USE adhesivos_colima$$
CREATE DEFINER=root@localhost PROCEDURE agregar_cliente(IN name VARCHAR(50), IN password VARCHAR(255), IN new_rfc VARCHAR(13), IN cellphone LONG, IN street VARCHAR(35), IN num INT, IN cp INT)
BEGIN
	DECLARE idUsuario INT;
    DECLARE resultRFC VARCHAR(13);
    
    SELECT rfc INTO resultRFC FROM clientes WHERE rfc = new_rfc;
    
    IF resultRFC IS NULL THEN
		INSERT INTO usuarios (nombreUsuario, contrasena, tipo) VALUES (name, password, "cliente");

		SELECT id INTO idUsuario FROM usuarios WHERE nombreUsuario = name AND contrasena = password;
    
		INSERT INTO clientes(rfc, celular, calle, numero, codigopostal, idUser) VALUES (new_rfc, cellphone, street, num, cp, idUsuario);
	ELSE
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El RFC ya existe.';
	END IF;
END$$

DELIMITER ;

INSERT INTO productos (nombre, precio, cantidad) VALUES
('adhesivo-universal', 3, 100),
('pegamento-para-madera', 4, 200),
('silicona-liquida', 4, 150),
('adhesivo-en-barra', 2, 300),
('cinta-adhesiva-de-doble-cara', 3, 120),
('cinta-adhesiva-transparente', 1, 250),
('adhesivo-epoxico', 6, 80),
('cola-blanca-para-manualidades', 2, 400),
('cinta-adhesiva-para-embalaje', 3, 180),
('pegamento-instantaneo-cianoacrilato', 2, 500),
('pegamento-termofusible', 3, 150),
('adhesivo-para-azulejos', 5, 90),
('pegamento-para-papel', 2, 300),
('pegamento-para-textil', 4, 120),
('adhesivo-de-contacto', 5, 110),
('adhesivo-para-plastico', 4, 200),
('adhesivo-para-metal', 6, 100),
('pegamento-en-spray', 5, 140),
('adhesivo-para-vidrio', 7, 70),
('adhesivo-para-pvc', 3, 220);

CREATE VIEW vista_usuarios_clientes AS
SELECT u.nombreUsuario, c.rfc, c.celular, c.calle, c.numero, c.codigopostal
FROM usuarios u
INNER JOIN clientes c
ON u.id = c.idUser
ORDER BY u.id;

DELIMITER //

CREATE TRIGGER verificar_cantidad_producto
BEFORE INSERT ON productos_factura
FOR EACH ROW
BEGIN
    DECLARE disponible INT;
    
    -- Obtener la cantidad disponible del producto
    SELECT cantidad INTO disponible FROM productos WHERE id = NEW.idproducto;
    
    -- Verificar si hay suficiente cantidad disponible
    IF disponible < NEW.cantidad THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'No hay suficiente cantidad del producto para realizar la venta';
    END IF;
END//

DELIMITER ;

DELIMITER //

CREATE PROCEDURE facturasPorCliente(IN idCliente INT)
BEGIN
    SELECT 
        f.id AS idfactura,
        f.fecha, 
        p.nombre AS producto, 
        pf.cantidad, 
        pf.precioVenta AS precio,
        (pf.cantidad * pf.precioVenta) AS total
    FROM 
        facturas f
    JOIN 
        productos_factura pf ON f.id = pf.idfactura
    JOIN 
        productos p ON pf.idproducto = p.id
    WHERE 
        f.idcliente = idCliente;
END //

DELIMITER ;






